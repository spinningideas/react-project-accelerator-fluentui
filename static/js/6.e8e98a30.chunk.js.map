{"version":3,"sources":["../../src/components/TextField/TextField.base.tsx","../../src/controlled.ts","../../src/components/TextField/TextField.styles.tsx","../../src/components/TextField/TextField.ts"],"names":["getClassNames","classNamesFunction","props","_textElement","_onFocus","ev","onFocus","setState","isFocused","validateOnFocusIn","_validate","value","_onBlur","onBlur","validateOnFocusOut","_onRenderLabel","label","required","labelStyles","_classNames","subComponentStyles","undefined","Label","htmlFor","_id","styles","disabled","id","_labelId","_onRenderDescription","description","className","_onInputChange","event","isSameValue","target","_lastChangeValue","persist","prevState","prevValue","_getValue","_isControlled","uncontrolledValue","onChange","initializeComponentRef","_async","Async","_fallbackId","getId","_descriptionId","COMPONENT_NAME","_warnControlledUsage","defaultValue","String","state","errorMessage","_delayedValidate","debounce","deferredValidationTime","_lastValidation","this","componentDidMount","_adjustInputHeight","validateOnLoad","componentWillUnmount","dispose","getSnapshotBeforeUpdate","prevProps","selection","selectionStart","selectionEnd","componentDidUpdate","snapshot","start","end","multiline","focus","setSelectionRange","_shouldValidateAllChanges","render","borderless","iconProps","inputClassName","underlined","prefix","resizable","suffix","theme","autoAdjustHeight","onRenderPrefix","onRenderSuffix","onRenderLabel","onRenderDescription","_errorMessage","focused","hasLabel","hasErrorMessage","hasIcon","root","wrapper","fieldGroup","_onRenderPrefix","_renderTextArea","_renderInput","Icon","icon","_onRenderSuffix","_isDescriptionAvailable","role","DelayedRender","current","blur","select","setSelectionStart","setSelectionEnd","_hasWarnedNullValue","warn","valueProp","style","paddingBottom","textAreaProps","ariaLabelledBy","ref","onInput","field","ariaLabel","readOnly","inputProps","type","_latestValidateValue","onGetErrorMessage","result","then","_notifyAfterValidate","onNotifyValidationResult","textField","height","scrollHeight","defaultProps","globalClassNames","unresizable","active","getLabelStyles","palette","fonts","color","neutralTertiary","fontSize","medium","marginRight","paddingLeft","paddingRight","lineHeight","selectors","TextField","styled","semanticColors","effects","classNames","fieldPrefixSuffix","background","disabledBackground","disabledText","inputPlaceholderText","display","alignItems","padding","whiteSpace","flexShrink","placeholderStyles","opacity","disabledPlaceholderStyles","position","borderBottom","errorText","inputBorder","width","borderBottomColor","borderColor","inputBorderHovered","inputFocusBorderAlt","border","borderRadius","roundedCorner2","inputBackground","cursor","flexDirection","minHeight","flex","textAlign","backgroundColor","content","top","right","inputText","minWidth","textOverflow","outline","resize","flexGrow","paddingTop","overflow","pointerEvents","bottom","bodySubtext","xSmall","slideDownIn20","small","margin","scope"],"mappings":"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","file":"static/js/6.e8e98a30.chunk.js","sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { Label, ILabelStyleProps, ILabelStyles } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  DelayedRender,\n  IStyleFunctionOrObject,\n  classNamesFunction,\n  getId,\n  getNativeProps,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nexport class TextFieldBase extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // Reset the record of the last value seen by a change/input event\n      this._lastChangeValue = undefined;\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused } = this.state;\n    const errorMessage = this._errorMessage;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n    });\n\n    return (\n      <div className={this._classNames.root}>\n        <div className={this._classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={this._classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={this._classNames.prefix}>{onRenderPrefix(this.props, this._onRenderPrefix)}</div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={this._classNames.icon} {...iconProps} />}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={this._classNames.suffix}>{onRenderSuffix(this.props, this._onRenderSuffix)}</div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>\n                  <p className={this._classNames.errorMessage}>\n                    <span data-automation-id=\"error-message\">{errorMessage}</span>\n                  </p>\n                </DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): React.ReactElement<React.HTMLAttributes<HTMLInputElement>> {\n    const inputProps = getNativeProps<React.HTMLAttributes<HTMLInputElement>>(this.props, inputProperties, [\n      'defaultValue',\n    ]);\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <input\n        type={'text'}\n        id={this._id}\n        aria-labelledby={ariaLabelledBy}\n        {...inputProps}\n        ref={this._textElement as React.RefObject<HTMLInputElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-label={this.props.ariaLabel}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n    if (value === undefined || value === this._lastChangeValue) {\n      return;\n    }\n    this._lastChangeValue = value;\n\n    // This is so developers can access the event properties in asynchronous callbacks\n    // https://reactjs.org/docs/events.html#event-pooling\n    event.persist();\n\n    let isSameValue: boolean;\n    this.setState(\n      (prevState: ITextFieldState, props: ITextFieldProps) => {\n        const prevValue = _getValue(props, prevState) || '';\n        isSameValue = value === prevValue;\n        // Avoid doing unnecessary work when the value has not changed.\n        if (isSameValue) {\n          return null;\n        }\n\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        return this._isControlled ? null : { uncontrolledValue: value };\n      },\n      () => {\n        // If the value actually changed, call onChange (for either controlled or uncontrolled)\n        const { onChange } = this.props;\n        if (!isSameValue && onChange) {\n          onChange(event, value);\n        }\n      },\n    );\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n","/**\n * Determines whether a component is controlled.\n * @param props - Component props\n * @param valueProp - Prop containing the controlled value\n * @returns true if controlled, false if uncontrolled\n */\nexport function isControlled<P>(props: P, valueProp: keyof P): boolean {\n  // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.\n  // Mirror that behavior here (rather than checking for just undefined).\n  return props[valueProp] !== undefined && props[valueProp] !== null;\n}\n","import {\n  AnimationClassNames,\n  getGlobalClassNames,\n  getInputFocusStyle,\n  HighContrastSelector,\n  IStyle,\n  normalize,\n  getPlaceholderStyles,\n  IconFontSizes,\n} from '../../Styling';\nimport { ILabelStyles, ILabelStyleProps } from '../../Label';\nimport { ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\nimport { IStyleFunctionOrObject } from '@uifabric/utilities';\n\nconst globalClassNames = {\n  root: 'ms-TextField',\n  description: 'ms-TextField-description',\n  errorMessage: 'ms-TextField-errorMessage',\n  field: 'ms-TextField-field',\n  fieldGroup: 'ms-TextField-fieldGroup',\n  prefix: 'ms-TextField-prefix',\n  suffix: 'ms-TextField-suffix',\n  wrapper: 'ms-TextField-wrapper',\n\n  multiline: 'ms-TextField--multiline',\n  borderless: 'ms-TextField--borderless',\n  underlined: 'ms-TextField--underlined',\n  unresizable: 'ms-TextField--unresizable',\n\n  required: 'is-required',\n  disabled: 'is-disabled',\n  active: 'is-active',\n};\n\nfunction getLabelStyles(props: ITextFieldStyleProps): IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles> {\n  const { underlined, disabled, focused, theme } = props;\n  const { palette, fonts } = theme;\n\n  return () => ({\n    root: [\n      underlined &&\n        disabled && {\n          color: palette.neutralTertiary,\n        },\n      underlined && {\n        fontSize: fonts.medium.fontSize,\n        marginRight: 8,\n        paddingLeft: 12,\n        paddingRight: 0,\n        lineHeight: '22px',\n        height: 32,\n      },\n      underlined &&\n        focused && {\n          selectors: {\n            [HighContrastSelector]: {\n              height: 31, // -1px to prevent jumpiness in HC with the increased border-width to 2px\n            },\n          },\n        },\n    ],\n  });\n}\n\nexport function getStyles(props: ITextFieldStyleProps): ITextFieldStyles {\n  const {\n    theme,\n    className,\n    disabled,\n    focused,\n    required,\n    multiline,\n    hasLabel,\n    borderless,\n    underlined,\n    hasIcon,\n    resizable,\n    hasErrorMessage,\n    inputClassName,\n    autoAdjustHeight,\n  } = props;\n\n  const { semanticColors, effects, fonts } = theme;\n\n  const classNames = getGlobalClassNames(globalClassNames, theme);\n\n  const fieldPrefixSuffix: IStyle = {\n    // Suffix/Prefix are not editable so the disabled slot perfectly fits.\n    background: semanticColors.disabledBackground,\n    color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 10px',\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    flexShrink: 0,\n  };\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    fonts.medium,\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      required && classNames.required,\n      disabled && classNames.disabled,\n      focused && classNames.active,\n      multiline && classNames.multiline,\n      borderless && classNames.borderless,\n      underlined && classNames.underlined,\n      normalize,\n      {\n        position: 'relative',\n      },\n      className,\n    ],\n    wrapper: [\n      classNames.wrapper,\n\n      underlined && [\n        {\n          display: 'flex',\n          borderBottom: `1px solid ${!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText}`,\n          width: '100%',\n        },\n        disabled && {\n          borderBottomColor: semanticColors.disabledBackground,\n          selectors: {\n            [HighContrastSelector]: {\n              borderColor: 'GrayText',\n            },\n          },\n        },\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderBottomColor: 'Highlight',\n                },\n              },\n            },\n          },\n        },\n        focused && [\n          {\n            position: 'relative',\n          },\n          getInputFocusStyle(\n            !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n            0,\n            'borderBottom',\n          ),\n        ],\n      ],\n    ],\n    fieldGroup: [\n      classNames.fieldGroup,\n      normalize,\n      {\n        border: `1px solid ${semanticColors.inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n        background: semanticColors.inputBackground,\n        cursor: 'text',\n        height: 32,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n        position: 'relative',\n      },\n      multiline && {\n        minHeight: '60px',\n        height: 'auto',\n        display: 'flex',\n      },\n\n      !focused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: semanticColors.inputBorderHovered,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'Highlight',\n                },\n              },\n            },\n          },\n        },\n\n      focused &&\n        !underlined &&\n        getInputFocusStyle(\n          !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n          effects.roundedCorner2,\n        ),\n      disabled && {\n        borderColor: semanticColors.disabledBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n          },\n        },\n\n        cursor: 'default',\n      },\n      borderless && {\n        border: 'none',\n      },\n      borderless &&\n        focused && {\n          border: 'none',\n          selectors: {\n            ':after': {\n              border: 'none',\n            },\n          },\n        },\n      underlined && {\n        flex: '1 1 0px',\n        border: 'none',\n        textAlign: 'left',\n      },\n      underlined &&\n        disabled && {\n          backgroundColor: 'transparent',\n        },\n\n      hasErrorMessage &&\n        !underlined && {\n          borderColor: semanticColors.errorText,\n          selectors: {\n            '&:hover': {\n              borderColor: semanticColors.errorText,\n            },\n          },\n        },\n      !hasLabel &&\n        required && {\n          selectors: {\n            ':before': {\n              content: `'*'`,\n              color: semanticColors.errorText,\n              position: 'absolute',\n              top: -5,\n              right: -10,\n            },\n            [HighContrastSelector]: {\n              selectors: {\n                ':before': {\n                  right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.\n                },\n              },\n            },\n          },\n        },\n    ],\n    field: [\n      fonts.medium,\n      classNames.field,\n      normalize,\n      {\n        borderRadius: 0,\n        border: 'none',\n        background: 'none',\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        padding: '0 8px',\n        width: '100%',\n        minWidth: 0,\n        textOverflow: 'ellipsis',\n        outline: 0,\n        selectors: {\n          '&:active, &:focus, &:hover': { outline: 0 },\n          '::-ms-clear': {\n            display: 'none',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      multiline &&\n        !resizable && [\n          classNames.unresizable,\n          {\n            resize: 'none',\n          },\n        ],\n      multiline && {\n        minHeight: 'inherit',\n        lineHeight: 17,\n        flexGrow: 1,\n        paddingTop: 6,\n        paddingBottom: 6,\n        overflow: 'auto',\n        width: '100%',\n      },\n      multiline &&\n        autoAdjustHeight && {\n          overflow: 'hidden',\n        },\n      hasIcon && {\n        paddingRight: 24,\n      },\n      multiline &&\n        hasIcon && {\n          paddingRight: 40,\n        },\n      disabled && [\n        {\n          backgroundColor: semanticColors.disabledBackground,\n          color: semanticColors.disabledText,\n          borderColor: semanticColors.disabledBackground,\n        },\n        getPlaceholderStyles(disabledPlaceholderStyles),\n      ],\n      underlined && {\n        textAlign: 'left',\n      },\n      focused &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingLeft: 11,\n              paddingRight: 11,\n            },\n          },\n        },\n      focused &&\n        multiline &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingTop: 4, // take into consideration the 2px increased border-width (not when borderless).\n            },\n          },\n        },\n      inputClassName,\n    ],\n    icon: [\n      multiline && {\n        paddingRight: 24,\n        alignItems: 'flex-end',\n      },\n      {\n        pointerEvents: 'none',\n        position: 'absolute',\n        bottom: 6,\n        right: 8,\n        top: 'auto',\n        fontSize: IconFontSizes.medium,\n        lineHeight: 18,\n      },\n      disabled && {\n        color: semanticColors.disabledText,\n      },\n    ],\n    description: [\n      classNames.description,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.xSmall.fontSize,\n      },\n    ],\n    errorMessage: [\n      classNames.errorMessage,\n      AnimationClassNames.slideDownIn20,\n      fonts.small,\n      {\n        color: semanticColors.errorText,\n        margin: 0,\n        paddingTop: 5,\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n    prefix: [classNames.prefix, fieldPrefixSuffix],\n    suffix: [classNames.suffix, fieldPrefixSuffix],\n    subComponentStyles: {\n      label: getLabelStyles(props),\n    },\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TextFieldBase } from './TextField.base';\nimport { ITextFieldProps, ITextFieldStyles, ITextFieldStyleProps } from './TextField.types';\nimport { getStyles } from './TextField.styles';\nexport { ITextField } from './TextField.types';\n\nexport const TextField: React.FunctionComponent<ITextFieldProps> = styled<\n  ITextFieldProps,\n  ITextFieldStyleProps,\n  ITextFieldStyles\n>(TextFieldBase, getStyles, undefined, {\n  scope: 'TextField',\n});\n"],"sourceRoot":""}